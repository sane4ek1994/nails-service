// Prisma schema for Nails Service PWA
// Models: User, VerificationCode, Service, Availability, Appointment

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    MASTER
    CLIENT
}

enum AppointmentStatus {
    booked
    confirmed
    cancelled
    completed
    no_show
}

model User {
    id        String   @id @default(cuid())
    role      Role
    phone     String?  @unique
    email     String?  @unique
    name      String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    servicesAsMaster       Service[]      @relation("MasterServices")
    availabilitiesAsMaster Availability[] @relation("MasterAvailabilities")
    appointmentsAsMaster   Appointment[]  @relation("MasterAppointments")
    appointmentsAsClient   Appointment[]  @relation("ClientAppointments")

    @@index([phone])
    @@index([email])
}

model VerificationCode {
    id        String   @id @default(cuid())
    target    String // normalized phone or email
    code      String // 6-digit code
    expiresAt DateTime
    used      Boolean  @default(false)
    createdAt DateTime @default(now())

    @@index([target, used])
    @@index([expiresAt])
}

model Service {
    id          String   @id @default(cuid())
    masterId    String
    title       String
    description String?
    durationMin Int // duration in minutes
    priceCents  Int // price in cents
    isActive    Boolean  @default(true)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    master       User          @relation("MasterServices", fields: [masterId], references: [id], onDelete: Cascade)
    appointments Appointment[]

    @@index([masterId, isActive])
}

model Availability {
    id        String   @id @default(cuid())
    masterId  String
    date      DateTime @db.Date // date only, no time
    startMin  Int // start time in minutes from midnight (e.g., 540 = 9:00 AM)
    endMin    Int // end time in minutes from midnight (e.g., 1080 = 6:00 PM)
    isBlocked Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    master User @relation("MasterAvailabilities", fields: [masterId], references: [id], onDelete: Cascade)

    @@index([masterId, date])
}

model Appointment {
    id          String            @id @default(cuid())
    masterId    String
    clientId    String
    serviceId   String
    dateTime    DateTime // appointment start time in UTC
    durationMin Int // duration in minutes
    status      AppointmentStatus @default(booked)
    notes       String?
    location    String? // salon location/address
    createdAt   DateTime          @default(now())
    updatedAt   DateTime          @updatedAt

    // Relations
    master  User    @relation("MasterAppointments", fields: [masterId], references: [id], onDelete: Cascade)
    client  User    @relation("ClientAppointments", fields: [clientId], references: [id], onDelete: Cascade)
    service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

    @@index([masterId, dateTime])
    @@index([clientId])
    @@index([dateTime])
}
